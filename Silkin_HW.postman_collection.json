{
	"info": {
		"_postman_id": "63d41bda-1d25-482b-8aa5-1bf0f573bd7e",
		"name": "Silkin_HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26908883"
	},
	"item": [
		{
			"name": "User flow",
			"item": [
				{
					"name": "Create user with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"User can not be created with an empty name. Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"User can not be created with invalid last name. Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Last Name has to be from 2 to 20 characters long\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"test test test test test test test test test test\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"User can not be created with invalid password. Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12345\",\r\n  \"repeatPassword\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with non matching passwords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"User can not be created with non matching passwords. Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Passwords do not match\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12345YYYtest\",\r\n  \"repeatPassword\": \"12345YYYaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"User can not be created with invalid email. Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Email is incorrect\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"test.com\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			],
			"description": "I added to this folder some validation checks for fields by user creation."
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(13000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check id data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.userId).to.eql('number');\r",
							"});\r",
							"pm.test(\"Check photoFilename data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.photoFilename).to.eql('string');\r",
							"});\r",
							"pm.test(\"Check distanceUnits data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.distanceUnits).to.eql('string');\r",
							"});\r",
							"pm.test(\"Check currency data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.currency).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var email = pm.variables.replaceIn('{{$randomEmail}}');\r",
							"pm.collectionVariables.set(\"email\", email);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/signup",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check id data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.userId).to.eql('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check photoFilename data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.photoFilename).to.eql('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check name data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.name).to.eql('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check lastName data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.lastName).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/profile",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check dateBirth data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.dateBirth).to.eql('string');\r",
							"});    \r",
							"\r",
							"pm.test(\"Check country data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.country).to.eql('string');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"photo\": \"{{photoUrl}}\",\r\n  \"name\": \"{{updatedName}}\",\r\n  \"lastName\": \"{{updatedLastName}}\",\r\n  \"dateBirth\": \"{{dateBirth}}\",\r\n  \"country\": \"{{$randomCountry}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/profile",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"oldPassword\": \"{{password}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"repeatPassword\": \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/logout",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(13000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check id data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.userId).to.eql('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check distanceUnits data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.distanceUnits).to.eql('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check currency data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.currency).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"remember\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/signin",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"car_id\", jsonData.data.id);\r",
							"\r",
							"pm.collectionVariables.set(\"car_CreatedAt\", jsonData.data.carCreatedAt);\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check CarID data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.id).to.eql('number');\r",
							"});    \r",
							"\r",
							"pm.test(\"Check brand data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.brand).to.eql('string');\r",
							"}); \r",
							"\r",
							"pm.test(\"Check model data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.model).to.eql('string');\r",
							"}); \r",
							"\r",
							"pm.test(\"Check logo data type\", function () {\r",
							"    pm.expect(typeof pm.response.json().data.logo).to.eql('string');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": 1,\r\n  \"carModelId\": 1,\r\n  \"mileage\": 122\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/cars",
					"host": [
						"{{url}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add expenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carId\": {{car_id}},\r\n  \"reportedAt\": \"{{car_CreatedAt}}\",\r\n  \"mileage\": 150,\r\n  \"liters\": 11,\r\n  \"totalCost\": 50,\r\n  \"forceMileage\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/expenses",
					"host": [
						"{{url}}"
					],
					"path": [
						"expenses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an object\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "password",
			"value": "Qwerty12345",
			"type": "string"
		},
		{
			"key": "updatedName",
			"value": "Yulia",
			"type": "string"
		},
		{
			"key": "updatedLastName",
			"value": "Hryhorenko",
			"type": "string"
		},
		{
			"key": "photoUrl",
			"value": "https://images.unsplash.com/photo-1561948955-570b270e7c36?q=80&w=1501&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
			"type": "string"
		},
		{
			"key": "newPassword",
			"value": "Qwerty0000",
			"type": "string"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "dateBirth",
			"value": "2021-03-17T15:21:05.000Z",
			"type": "string"
		},
		{
			"key": "car_id",
			"value": ""
		},
		{
			"key": "car_CreatedAt",
			"value": ""
		}
	]
}